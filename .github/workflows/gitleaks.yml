name: GitLeaks Security Scan

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  # Required for uploading SARIF results to GitHub Security tab
  security-events: write
  # Required for checking out code
  contents: read
  # Required for PR comments (optional)
  pull-requests: write

jobs:
  gitleaks:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for complete scan
          
      - name: Run GitLeaks
        id: gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Optional: for GitLeaks Pro
        continue-on-error: true  # Don't fail the workflow if secrets are found
        
      - name: Generate GitLeaks report
        if: always()
        run: |
          # Run gitleaks with report generation, handling both success and failure cases
          docker run --rm -v "${{ github.workspace }}:/path" zricethezav/gitleaks:latest \
            detect --source="/path" --verbose --report-format=sarif --report-path="/path/gitleaks.sarif" || true
          
          # Ensure the file exists even if no secrets found
          if [ ! -f gitleaks.sarif ]; then
            echo '{"$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","version":"2.1.0","runs":[{"tool":{"driver":{"name":"Gitleaks"}},"results":[]}]}' > gitleaks.sarif
          fi
          
      - name: Check if SARIF file exists
        id: check_sarif
        run: |
          if [ -f gitleaks.sarif ]; then
            echo "sarif_exists=true" >> $GITHUB_OUTPUT
            echo "SARIF file found"
            ls -la gitleaks.sarif
          else
            echo "sarif_exists=false" >> $GITHUB_OUTPUT
            echo "SARIF file not found"
          fi
          
      - name: Upload SARIF results to Security tab
        if: steps.check_sarif.outputs.sarif_exists == 'true' && github.repository_owner != github.actor
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
          category: gitleaks
          
      - name: Comment on PR with results (if SARIF upload fails)
        if: steps.check_sarif.outputs.sarif_exists == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const sarifContent = JSON.parse(fs.readFileSync('gitleaks.sarif', 'utf8'));
              const results = sarifContent.runs[0]?.results || [];
              
              if (results.length > 0) {
                const comment = `## 🔐 GitLeaks Security Scan Results
                
                Found ${results.length} potential secret(s) in this PR:

                ${results.map((result, index) => 
                `**${index + 1}.** ${result.message?.text || 'Potential secret detected'}
                - File: \`${result.locations?.[0]?.physicalLocation?.artifactLocation?.uri || 'Unknown'}\`
                - Line: ${result.locations?.[0]?.physicalLocation?.region?.startLine || 'Unknown'}`
                ).join('\n\n')}

                Please review and remove any actual secrets before merging.`;
                                
                                github.rest.issues.createComment({
                                issue_number: context.issue.number,
                                owner: context.repo.owner,
                                repo: context.repo.repo,
                                body: comment
                                });
                            }
                            } catch (error) {
                            console.log('Error processing SARIF file:', error);
                            }
          
      - name: Upload GitLeaks report as artifact
        if: steps.check_sarif.outputs.sarif_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks.sarif
          retention-days: 30